package com.example.ExpensiveTrackerSystem.entity;

import com.speedment.jpastreamer.field.ComparableField;
import com.speedment.jpastreamer.field.DoubleField;
import com.speedment.jpastreamer.field.StringField;

import java.time.LocalDate;

/**
 * The generated base for entity {@link Product} representing entities of the
 * {@code product}-table in the database.
 * <p> This file has been automatically generated by JPAStreamer.
 * 
 * @author JPAStreamer
 */
public final class Product$ {
    
    /**
     * This Field corresponds to the {@link Product} field "description".
     */
    public static final StringField<Product> description = StringField.create(
        Product.class,
        "description",
        Product::getDescription,
        false
    );
    /**
     * This Field corresponds to the {@link Product} field "createDate".
     */
    public static final ComparableField<Product, LocalDate> createDate = ComparableField.create(
        Product.class,
        "createDate",
        Product::getCreateDate,
        false
    );
    /**
     * This Field corresponds to the {@link Product} field "id".
     */
    public static final ComparableField<Product, Long> id = ComparableField.create(
        Product.class,
        "id",
        Product::getId,
        false
    );
    /**
     * This Field corresponds to the {@link Product} field "paymentCategory".
     */
    public static final StringField<Product> paymentCategory = StringField.create(
        Product.class,
        "paymentCategory",
        Product::getPaymentCategory,
        false
    );
    /**
     * This Field corresponds to the {@link Product} field "itemName".
     */
    public static final StringField<Product> itemName = StringField.create(
        Product.class,
        "itemName",
        Product::getItemName,
        false
    );
    /**
     * This Field corresponds to the {@link Product} field "amount".
     */
    public static final DoubleField<Product> amount = DoubleField.create(
        Product.class,
        "amount",
        Product::getAmount,
        false
    );
}